Modificadores de Acceso:
*default: Es cuando no se asigna ningun modificador a la variable/objeto/metodo, es similar al modificador public con la salvedad de que no son visibles desde otro paquete.
*public: Puede acceder a los atributos/metodos desde cualquier lado.
*private: Solo puede acceder a los atributos/metodos dentro de la misma clase o dentro de los metodos de la misma clase.
*protected -> Es igual que private con la salvedad de que los atributos/metodos con este modificador son visibles desde las clases hijas. Generalmente los atributos de clases padre deben ser protected.

Modificador static: Se utiliza para acceder a un atributo o metodo de una clase sin necesidad de instanciar la clase que lo contiene. El valor de un atributo estatico sera el mismo para cualquier instancia de una clase. 
	Para acceder a un atributo estatico se hace de la siguiente forma:
		NombreClase.nombreAtributo;
	Para acceder a un metodo estatico se hace de la siguiente forma:
		NombreClase.nombreMetodo();
Usualmente los atributos y metodos estaticos son pubilcos.


Pilares de la Programacion Orientada a Objetos (POO - OOP)
*Abstraccion: Es utilizar una funcionalidad sin necesidad de saber como esta estructurada o compuesta internamente. En POO se aplicaria definiendo clases con sus atributos y metodos poniendolos a disposición de otros usuarios/programadores sin que ellos necesiten saber la composicion interna de la misma.

*Encapsulacion:	Definir atributos como privados para ser accedidos mediante metodos publicos, esto se hace para proteger al atributo interno de modificaciones accidentales.

*Herencia: Es una funcionalidad que permite crear una clase a partir de otra, de tal forma que la clase base se le conoce como clase padre y la nueva clase se le conoce como clase hija, esta ultima hereda todos los atributos y metodos de la clase padre. Los atributos de una clase padre se suelen definir con el modificador protected para que puedan ser accedidos desde clases hijas.
Una de las principales ventajas de la herencia es la reutilizacion de codigo.

Sobreescritura de metodos (Override): Volver a escribir un metodo que estaba previamente definido en una clase padre, este nuevo metodo se reescribe en la clase y puede ejecutar instrucciones complemente diferentes.
	
	Clases Abstractas: Generalmente se utiliza para clases padre, esto debido a que consolidan atributos y metodos en comun de varias clases como un resumen de las mismas. (abstract => resumen).
	Para definir una clase como abstracta se tiene  que utilizar el modificador abstract. Una clase de este tipo debe cumplir con las siguientes reglas:
	1. Una clase abstracta no se puede instanciar.
	2. Una clase abstracta puede tener 0 o muchos metodos abstractos.
	3. Un metodo abstracto no tiene cuerpo. Es decir  no lleva llaves ({}) finaliza con ;
	4. Si una clase tiene al menos un metodo abstracto la clase tambien tiene que ser abstracta.
	5. Un metodo abstracto tiene que sobreescribirse obligatoriamente en una clase hija.
	6. Generalmente se utiliza para definir estructuras de clases padre.
	7. Aunque no se intancien, las clases abstractas si pueden tener constructores.




*Polimorfismo: 
	Poli: Muchos
	morfismo: formas

	Funcionalidad que permite utilizar elementos que tienen la misma forma pero que dependiendo de su definición tienen una diferente funcionalidad. En resumen misma forma diferente funcionalidad.

	Algunas aplicaciones de polimorfismo:
	*Sobrecarga de funciones
	*Sobreescritura de metodos
	*Compatibilidad entre clases padre e hijas.